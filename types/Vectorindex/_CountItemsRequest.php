<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: vectorindex.proto

namespace Vectorindex;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>vectorindex._CountItemsRequest</code>
 */
class _CountItemsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string index_name = 1;</code>
     */
    protected $index_name = '';
    protected $filter;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $index_name
     *     @type \Vectorindex\_CountItemsRequest\All $all
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Vectorindex::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string index_name = 1;</code>
     * @return string
     */
    public function getIndexName()
    {
        return $this->index_name;
    }

    /**
     * Generated from protobuf field <code>string index_name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setIndexName($var)
    {
        GPBUtil::checkString($var, True);
        $this->index_name = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.vectorindex._CountItemsRequest.All all = 2;</code>
     * @return \Vectorindex\_CountItemsRequest\All|null
     */
    public function getAll()
    {
        return $this->readOneof(2);
    }

    public function hasAll()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._CountItemsRequest.All all = 2;</code>
     * @param \Vectorindex\_CountItemsRequest\All $var
     * @return $this
     */
    public function setAll($var)
    {
        GPBUtil::checkMessage($var, \Vectorindex\_CountItemsRequest\All::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getFilter()
    {
        return $this->whichOneof("filter");
    }

}

