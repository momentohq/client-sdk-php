<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: vectorindex.proto

namespace Vectorindex;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>vectorindex._FilterExpression</code>
 */
class _FilterExpression extends \Google\Protobuf\Internal\Message
{
    protected $expression;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Vectorindex\_EqualsExpression $equals_expression
     *     @type \Vectorindex\_AndExpression $and_expression
     *     @type \Vectorindex\_OrExpression $or_expression
     *     @type \Vectorindex\_NotExpression $not_expression
     *     @type \Vectorindex\_GreaterThanExpression $greater_than_expression
     *     @type \Vectorindex\_GreaterThanOrEqualExpression $greater_than_or_equal_expression
     *     @type \Vectorindex\_LessThanExpression $less_than_expression
     *     @type \Vectorindex\_LessThanOrEqualExpression $less_than_or_equal_expression
     *     @type \Vectorindex\_ListContainsExpression $list_contains_expression
     *     @type \Vectorindex\_IdInSetExpression $id_in_set_expression
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Vectorindex::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._EqualsExpression equals_expression = 1;</code>
     * @return \Vectorindex\_EqualsExpression|null
     */
    public function getEqualsExpression()
    {
        return $this->readOneof(1);
    }

    public function hasEqualsExpression()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._EqualsExpression equals_expression = 1;</code>
     * @param \Vectorindex\_EqualsExpression $var
     * @return $this
     */
    public function setEqualsExpression($var)
    {
        GPBUtil::checkMessage($var, \Vectorindex\_EqualsExpression::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.vectorindex._AndExpression and_expression = 2;</code>
     * @return \Vectorindex\_AndExpression|null
     */
    public function getAndExpression()
    {
        return $this->readOneof(2);
    }

    public function hasAndExpression()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._AndExpression and_expression = 2;</code>
     * @param \Vectorindex\_AndExpression $var
     * @return $this
     */
    public function setAndExpression($var)
    {
        GPBUtil::checkMessage($var, \Vectorindex\_AndExpression::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.vectorindex._OrExpression or_expression = 3;</code>
     * @return \Vectorindex\_OrExpression|null
     */
    public function getOrExpression()
    {
        return $this->readOneof(3);
    }

    public function hasOrExpression()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._OrExpression or_expression = 3;</code>
     * @param \Vectorindex\_OrExpression $var
     * @return $this
     */
    public function setOrExpression($var)
    {
        GPBUtil::checkMessage($var, \Vectorindex\_OrExpression::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.vectorindex._NotExpression not_expression = 4;</code>
     * @return \Vectorindex\_NotExpression|null
     */
    public function getNotExpression()
    {
        return $this->readOneof(4);
    }

    public function hasNotExpression()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._NotExpression not_expression = 4;</code>
     * @param \Vectorindex\_NotExpression $var
     * @return $this
     */
    public function setNotExpression($var)
    {
        GPBUtil::checkMessage($var, \Vectorindex\_NotExpression::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.vectorindex._GreaterThanExpression greater_than_expression = 5;</code>
     * @return \Vectorindex\_GreaterThanExpression|null
     */
    public function getGreaterThanExpression()
    {
        return $this->readOneof(5);
    }

    public function hasGreaterThanExpression()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._GreaterThanExpression greater_than_expression = 5;</code>
     * @param \Vectorindex\_GreaterThanExpression $var
     * @return $this
     */
    public function setGreaterThanExpression($var)
    {
        GPBUtil::checkMessage($var, \Vectorindex\_GreaterThanExpression::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.vectorindex._GreaterThanOrEqualExpression greater_than_or_equal_expression = 6;</code>
     * @return \Vectorindex\_GreaterThanOrEqualExpression|null
     */
    public function getGreaterThanOrEqualExpression()
    {
        return $this->readOneof(6);
    }

    public function hasGreaterThanOrEqualExpression()
    {
        return $this->hasOneof(6);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._GreaterThanOrEqualExpression greater_than_or_equal_expression = 6;</code>
     * @param \Vectorindex\_GreaterThanOrEqualExpression $var
     * @return $this
     */
    public function setGreaterThanOrEqualExpression($var)
    {
        GPBUtil::checkMessage($var, \Vectorindex\_GreaterThanOrEqualExpression::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.vectorindex._LessThanExpression less_than_expression = 7;</code>
     * @return \Vectorindex\_LessThanExpression|null
     */
    public function getLessThanExpression()
    {
        return $this->readOneof(7);
    }

    public function hasLessThanExpression()
    {
        return $this->hasOneof(7);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._LessThanExpression less_than_expression = 7;</code>
     * @param \Vectorindex\_LessThanExpression $var
     * @return $this
     */
    public function setLessThanExpression($var)
    {
        GPBUtil::checkMessage($var, \Vectorindex\_LessThanExpression::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.vectorindex._LessThanOrEqualExpression less_than_or_equal_expression = 8;</code>
     * @return \Vectorindex\_LessThanOrEqualExpression|null
     */
    public function getLessThanOrEqualExpression()
    {
        return $this->readOneof(8);
    }

    public function hasLessThanOrEqualExpression()
    {
        return $this->hasOneof(8);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._LessThanOrEqualExpression less_than_or_equal_expression = 8;</code>
     * @param \Vectorindex\_LessThanOrEqualExpression $var
     * @return $this
     */
    public function setLessThanOrEqualExpression($var)
    {
        GPBUtil::checkMessage($var, \Vectorindex\_LessThanOrEqualExpression::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.vectorindex._ListContainsExpression list_contains_expression = 9;</code>
     * @return \Vectorindex\_ListContainsExpression|null
     */
    public function getListContainsExpression()
    {
        return $this->readOneof(9);
    }

    public function hasListContainsExpression()
    {
        return $this->hasOneof(9);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._ListContainsExpression list_contains_expression = 9;</code>
     * @param \Vectorindex\_ListContainsExpression $var
     * @return $this
     */
    public function setListContainsExpression($var)
    {
        GPBUtil::checkMessage($var, \Vectorindex\_ListContainsExpression::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.vectorindex._IdInSetExpression id_in_set_expression = 10;</code>
     * @return \Vectorindex\_IdInSetExpression|null
     */
    public function getIdInSetExpression()
    {
        return $this->readOneof(10);
    }

    public function hasIdInSetExpression()
    {
        return $this->hasOneof(10);
    }

    /**
     * Generated from protobuf field <code>.vectorindex._IdInSetExpression id_in_set_expression = 10;</code>
     * @param \Vectorindex\_IdInSetExpression $var
     * @return $this
     */
    public function setIdInSetExpression($var)
    {
        GPBUtil::checkMessage($var, \Vectorindex\_IdInSetExpression::class);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getExpression()
    {
        return $this->whichOneof("expression");
    }

}

