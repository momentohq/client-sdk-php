<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cachepubsub.proto

namespace Cache_client\Pubsub;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Possible message kinds from a topic. They can be items when they're from you, or
 * other kinds when we have something we think you might need to know about the
 * subscription's status.
 *
 * Generated from protobuf message <code>cache_client.pubsub._SubscriptionItem</code>
 */
class _SubscriptionItem extends \Google\Protobuf\Internal\Message
{
    protected $kind;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Cache_client\Pubsub\_TopicItem $item
     *           The subscription has yielded an item you previously published.
     *     @type \Cache_client\Pubsub\_Discontinuity $discontinuity
     *           Momento wants to let you know we detected some possible inconsistency at this
     *           point in the subscription stream.
     *           A lack of a discontinuity does not mean the subscription is guaranteed to be
     *           strictly perfect, but the presence of a discontinuity is very likely to
     *     @type \Cache_client\Pubsub\_Heartbeat $heartbeat
     *           The stream is still working, there's nothing to see here.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cachepubsub::initOnce();
        parent::__construct($data);
    }

    /**
     * The subscription has yielded an item you previously published.
     *
     * Generated from protobuf field <code>.cache_client.pubsub._TopicItem item = 1;</code>
     * @return \Cache_client\Pubsub\_TopicItem|null
     */
    public function getItem()
    {
        return $this->readOneof(1);
    }

    public function hasItem()
    {
        return $this->hasOneof(1);
    }

    /**
     * The subscription has yielded an item you previously published.
     *
     * Generated from protobuf field <code>.cache_client.pubsub._TopicItem item = 1;</code>
     * @param \Cache_client\Pubsub\_TopicItem $var
     * @return $this
     */
    public function setItem($var)
    {
        GPBUtil::checkMessage($var, \Cache_client\Pubsub\_TopicItem::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Momento wants to let you know we detected some possible inconsistency at this
     * point in the subscription stream.
     * A lack of a discontinuity does not mean the subscription is guaranteed to be
     * strictly perfect, but the presence of a discontinuity is very likely to
     *
     * Generated from protobuf field <code>.cache_client.pubsub._Discontinuity discontinuity = 2;</code>
     * @return \Cache_client\Pubsub\_Discontinuity|null
     */
    public function getDiscontinuity()
    {
        return $this->readOneof(2);
    }

    public function hasDiscontinuity()
    {
        return $this->hasOneof(2);
    }

    /**
     * Momento wants to let you know we detected some possible inconsistency at this
     * point in the subscription stream.
     * A lack of a discontinuity does not mean the subscription is guaranteed to be
     * strictly perfect, but the presence of a discontinuity is very likely to
     *
     * Generated from protobuf field <code>.cache_client.pubsub._Discontinuity discontinuity = 2;</code>
     * @param \Cache_client\Pubsub\_Discontinuity $var
     * @return $this
     */
    public function setDiscontinuity($var)
    {
        GPBUtil::checkMessage($var, \Cache_client\Pubsub\_Discontinuity::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * The stream is still working, there's nothing to see here.
     *
     * Generated from protobuf field <code>.cache_client.pubsub._Heartbeat heartbeat = 3;</code>
     * @return \Cache_client\Pubsub\_Heartbeat|null
     */
    public function getHeartbeat()
    {
        return $this->readOneof(3);
    }

    public function hasHeartbeat()
    {
        return $this->hasOneof(3);
    }

    /**
     * The stream is still working, there's nothing to see here.
     *
     * Generated from protobuf field <code>.cache_client.pubsub._Heartbeat heartbeat = 3;</code>
     * @param \Cache_client\Pubsub\_Heartbeat $var
     * @return $this
     */
    public function setHeartbeat($var)
    {
        GPBUtil::checkMessage($var, \Cache_client\Pubsub\_Heartbeat::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getKind()
    {
        return $this->whichOneof("kind");
    }

}

