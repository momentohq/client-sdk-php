<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cacheclient.proto

namespace Cache_client\_SortedSetFetchRequest;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>cache_client._SortedSetFetchRequest._ByScore</code>
 */
class _ByScore extends \Google\Protobuf\Internal\Message
{
    /**
     * Offset and count are used to only get a range of the matching elements,
     * similar to "SELECT LIMIT offset, count" in SQL.
     * A negative count returns all elements from the offset.
     * Use (0, -1) to return all matching elements.
     *
     * Generated from protobuf field <code>uint32 offset = 5;</code>
     */
    protected $offset = 0;
    /**
     * Generated from protobuf field <code>sint32 count = 6;</code>
     */
    protected $count = 0;
    protected $min;
    protected $max;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Common\_Unbounded $unbounded_min
     *     @type \Cache_client\_SortedSetFetchRequest\_ByScore\_Score $min_score
     *     @type \Common\_Unbounded $unbounded_max
     *     @type \Cache_client\_SortedSetFetchRequest\_ByScore\_Score $max_score
     *     @type int $offset
     *           Offset and count are used to only get a range of the matching elements,
     *           similar to "SELECT LIMIT offset, count" in SQL.
     *           A negative count returns all elements from the offset.
     *           Use (0, -1) to return all matching elements.
     *     @type int $count
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cacheclient::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.common._Unbounded unbounded_min = 1;</code>
     * @return \Common\_Unbounded|null
     */
    public function getUnboundedMin()
    {
        return $this->readOneof(1);
    }

    public function hasUnboundedMin()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.common._Unbounded unbounded_min = 1;</code>
     * @param \Common\_Unbounded $var
     * @return $this
     */
    public function setUnboundedMin($var)
    {
        GPBUtil::checkMessage($var, \Common\_Unbounded::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.cache_client._SortedSetFetchRequest._ByScore._Score min_score = 2;</code>
     * @return \Cache_client\_SortedSetFetchRequest\_ByScore\_Score|null
     */
    public function getMinScore()
    {
        return $this->readOneof(2);
    }

    public function hasMinScore()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.cache_client._SortedSetFetchRequest._ByScore._Score min_score = 2;</code>
     * @param \Cache_client\_SortedSetFetchRequest\_ByScore\_Score $var
     * @return $this
     */
    public function setMinScore($var)
    {
        GPBUtil::checkMessage($var, \Cache_client\_SortedSetFetchRequest\_ByScore\_Score::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.common._Unbounded unbounded_max = 3;</code>
     * @return \Common\_Unbounded|null
     */
    public function getUnboundedMax()
    {
        return $this->readOneof(3);
    }

    public function hasUnboundedMax()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.common._Unbounded unbounded_max = 3;</code>
     * @param \Common\_Unbounded $var
     * @return $this
     */
    public function setUnboundedMax($var)
    {
        GPBUtil::checkMessage($var, \Common\_Unbounded::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.cache_client._SortedSetFetchRequest._ByScore._Score max_score = 4;</code>
     * @return \Cache_client\_SortedSetFetchRequest\_ByScore\_Score|null
     */
    public function getMaxScore()
    {
        return $this->readOneof(4);
    }

    public function hasMaxScore()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.cache_client._SortedSetFetchRequest._ByScore._Score max_score = 4;</code>
     * @param \Cache_client\_SortedSetFetchRequest\_ByScore\_Score $var
     * @return $this
     */
    public function setMaxScore($var)
    {
        GPBUtil::checkMessage($var, \Cache_client\_SortedSetFetchRequest\_ByScore\_Score::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Offset and count are used to only get a range of the matching elements,
     * similar to "SELECT LIMIT offset, count" in SQL.
     * A negative count returns all elements from the offset.
     * Use (0, -1) to return all matching elements.
     *
     * Generated from protobuf field <code>uint32 offset = 5;</code>
     * @return int
     */
    public function getOffset()
    {
        return $this->offset;
    }

    /**
     * Offset and count are used to only get a range of the matching elements,
     * similar to "SELECT LIMIT offset, count" in SQL.
     * A negative count returns all elements from the offset.
     * Use (0, -1) to return all matching elements.
     *
     * Generated from protobuf field <code>uint32 offset = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setOffset($var)
    {
        GPBUtil::checkUint32($var);
        $this->offset = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>sint32 count = 6;</code>
     * @return int
     */
    public function getCount()
    {
        return $this->count;
    }

    /**
     * Generated from protobuf field <code>sint32 count = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->count = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getMin()
    {
        return $this->whichOneof("min");
    }

    /**
     * @return string
     */
    public function getMax()
    {
        return $this->whichOneof("max");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(_ByScore::class, \Cache_client\_SortedSetFetchRequest__ByScore::class);

