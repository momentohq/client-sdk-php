<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cacheclient.proto

namespace Cache_client;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>cache_client._SetIfHashRequest</code>
 */
class _SetIfHashRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>bytes cache_key = 1;</code>
     */
    protected $cache_key = '';
    /**
     * Generated from protobuf field <code>bytes cache_body = 2;</code>
     */
    protected $cache_body = '';
    /**
     * Generated from protobuf field <code>uint64 ttl_milliseconds = 3;</code>
     */
    protected $ttl_milliseconds = 0;
    protected $condition;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $cache_key
     *     @type string $cache_body
     *     @type int|string $ttl_milliseconds
     *     @type \Common\PresentAndNotHashEqual $present_and_not_hash_equal
     *           Update the item only if it exists and the hash of its current value
     *           does not match the hash passed in the request
     *     @type \Common\PresentAndHashEqual $present_and_hash_equal
     *           Update the item only if it exists and the hash of its current value
     *           matches the hash passed in the request    
     *     @type \Common\AbsentOrHashEqual $absent_or_hash_equal
     *           Update the item if it exists and the hash of its current value matches
     *           the hash passed in the request or create it if the item doesn't exist
     *     @type \Common\AbsentOrNotHashEqual $absent_or_not_hash_equal
     *           Update the item if it exists and the hash of its current value doesn't
     *           match the hash passed in the request or create it if the item doesn't exist
     *     @type \Common\Unconditional $unconditional
     *           Unconditionally update the item if it exists or create it if it doesn't
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cacheclient::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bytes cache_key = 1;</code>
     * @return string
     */
    public function getCacheKey()
    {
        return $this->cache_key;
    }

    /**
     * Generated from protobuf field <code>bytes cache_key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setCacheKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->cache_key = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes cache_body = 2;</code>
     * @return string
     */
    public function getCacheBody()
    {
        return $this->cache_body;
    }

    /**
     * Generated from protobuf field <code>bytes cache_body = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setCacheBody($var)
    {
        GPBUtil::checkString($var, False);
        $this->cache_body = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint64 ttl_milliseconds = 3;</code>
     * @return int|string
     */
    public function getTtlMilliseconds()
    {
        return $this->ttl_milliseconds;
    }

    /**
     * Generated from protobuf field <code>uint64 ttl_milliseconds = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTtlMilliseconds($var)
    {
        GPBUtil::checkUint64($var);
        $this->ttl_milliseconds = $var;

        return $this;
    }

    /**
     * Update the item only if it exists and the hash of its current value
     * does not match the hash passed in the request
     *
     * Generated from protobuf field <code>.common.PresentAndNotHashEqual present_and_not_hash_equal = 4;</code>
     * @return \Common\PresentAndNotHashEqual|null
     */
    public function getPresentAndNotHashEqual()
    {
        return $this->readOneof(4);
    }

    public function hasPresentAndNotHashEqual()
    {
        return $this->hasOneof(4);
    }

    /**
     * Update the item only if it exists and the hash of its current value
     * does not match the hash passed in the request
     *
     * Generated from protobuf field <code>.common.PresentAndNotHashEqual present_and_not_hash_equal = 4;</code>
     * @param \Common\PresentAndNotHashEqual $var
     * @return $this
     */
    public function setPresentAndNotHashEqual($var)
    {
        GPBUtil::checkMessage($var, \Common\PresentAndNotHashEqual::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Update the item only if it exists and the hash of its current value
     * matches the hash passed in the request    
     *
     * Generated from protobuf field <code>.common.PresentAndHashEqual present_and_hash_equal = 5;</code>
     * @return \Common\PresentAndHashEqual|null
     */
    public function getPresentAndHashEqual()
    {
        return $this->readOneof(5);
    }

    public function hasPresentAndHashEqual()
    {
        return $this->hasOneof(5);
    }

    /**
     * Update the item only if it exists and the hash of its current value
     * matches the hash passed in the request    
     *
     * Generated from protobuf field <code>.common.PresentAndHashEqual present_and_hash_equal = 5;</code>
     * @param \Common\PresentAndHashEqual $var
     * @return $this
     */
    public function setPresentAndHashEqual($var)
    {
        GPBUtil::checkMessage($var, \Common\PresentAndHashEqual::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Update the item if it exists and the hash of its current value matches
     * the hash passed in the request or create it if the item doesn't exist
     *
     * Generated from protobuf field <code>.common.AbsentOrHashEqual absent_or_hash_equal = 6;</code>
     * @return \Common\AbsentOrHashEqual|null
     */
    public function getAbsentOrHashEqual()
    {
        return $this->readOneof(6);
    }

    public function hasAbsentOrHashEqual()
    {
        return $this->hasOneof(6);
    }

    /**
     * Update the item if it exists and the hash of its current value matches
     * the hash passed in the request or create it if the item doesn't exist
     *
     * Generated from protobuf field <code>.common.AbsentOrHashEqual absent_or_hash_equal = 6;</code>
     * @param \Common\AbsentOrHashEqual $var
     * @return $this
     */
    public function setAbsentOrHashEqual($var)
    {
        GPBUtil::checkMessage($var, \Common\AbsentOrHashEqual::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Update the item if it exists and the hash of its current value doesn't
     * match the hash passed in the request or create it if the item doesn't exist
     *
     * Generated from protobuf field <code>.common.AbsentOrNotHashEqual absent_or_not_hash_equal = 7;</code>
     * @return \Common\AbsentOrNotHashEqual|null
     */
    public function getAbsentOrNotHashEqual()
    {
        return $this->readOneof(7);
    }

    public function hasAbsentOrNotHashEqual()
    {
        return $this->hasOneof(7);
    }

    /**
     * Update the item if it exists and the hash of its current value doesn't
     * match the hash passed in the request or create it if the item doesn't exist
     *
     * Generated from protobuf field <code>.common.AbsentOrNotHashEqual absent_or_not_hash_equal = 7;</code>
     * @param \Common\AbsentOrNotHashEqual $var
     * @return $this
     */
    public function setAbsentOrNotHashEqual($var)
    {
        GPBUtil::checkMessage($var, \Common\AbsentOrNotHashEqual::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Unconditionally update the item if it exists or create it if it doesn't
     *
     * Generated from protobuf field <code>.common.Unconditional unconditional = 8;</code>
     * @return \Common\Unconditional|null
     */
    public function getUnconditional()
    {
        return $this->readOneof(8);
    }

    public function hasUnconditional()
    {
        return $this->hasOneof(8);
    }

    /**
     * Unconditionally update the item if it exists or create it if it doesn't
     *
     * Generated from protobuf field <code>.common.Unconditional unconditional = 8;</code>
     * @param \Common\Unconditional $var
     * @return $this
     */
    public function setUnconditional($var)
    {
        GPBUtil::checkMessage($var, \Common\Unconditional::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getCondition()
    {
        return $this->whichOneof("condition");
    }

}

