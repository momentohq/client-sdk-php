<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cacheclient.proto

namespace Cache_client;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>cache_client._ListFetchRequest</code>
 */
class _ListFetchRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>bytes list_name = 1;</code>
     */
    protected $list_name = '';
    protected $start_index;
    protected $end_index;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $list_name
     *     @type \Common\_Unbounded $unbounded_start
     *     @type int $inclusive_start
     *     @type \Common\_Unbounded $unbounded_end
     *     @type int $exclusive_end
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cacheclient::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bytes list_name = 1;</code>
     * @return string
     */
    public function getListName()
    {
        return $this->list_name;
    }

    /**
     * Generated from protobuf field <code>bytes list_name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setListName($var)
    {
        GPBUtil::checkString($var, False);
        $this->list_name = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.common._Unbounded unbounded_start = 2;</code>
     * @return \Common\_Unbounded|null
     */
    public function getUnboundedStart()
    {
        return $this->readOneof(2);
    }

    public function hasUnboundedStart()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.common._Unbounded unbounded_start = 2;</code>
     * @param \Common\_Unbounded $var
     * @return $this
     */
    public function setUnboundedStart($var)
    {
        GPBUtil::checkMessage($var, \Common\_Unbounded::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>sint32 inclusive_start = 3;</code>
     * @return int
     */
    public function getInclusiveStart()
    {
        return $this->readOneof(3);
    }

    public function hasInclusiveStart()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>sint32 inclusive_start = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setInclusiveStart($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.common._Unbounded unbounded_end = 4;</code>
     * @return \Common\_Unbounded|null
     */
    public function getUnboundedEnd()
    {
        return $this->readOneof(4);
    }

    public function hasUnboundedEnd()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.common._Unbounded unbounded_end = 4;</code>
     * @param \Common\_Unbounded $var
     * @return $this
     */
    public function setUnboundedEnd($var)
    {
        GPBUtil::checkMessage($var, \Common\_Unbounded::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>sint32 exclusive_end = 5;</code>
     * @return int
     */
    public function getExclusiveEnd()
    {
        return $this->readOneof(5);
    }

    public function hasExclusiveEnd()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>sint32 exclusive_end = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setExclusiveEnd($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getStartIndex()
    {
        return $this->whichOneof("start_index");
    }

    /**
     * @return string
     */
    public function getEndIndex()
    {
        return $this->whichOneof("end_index");
    }

}

