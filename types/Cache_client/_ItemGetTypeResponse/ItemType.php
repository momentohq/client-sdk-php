<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cacheclient.proto

namespace Cache_client\_ItemGetTypeResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>cache_client._ItemGetTypeResponse.ItemType</code>
 */
class ItemType
{
    /**
     * Generated from protobuf enum <code>SCALAR = 0;</code>
     */
    const SCALAR = 0;
    /**
     * Generated from protobuf enum <code>DICTIONARY = 1;</code>
     */
    const DICTIONARY = 1;
    /**
     * Generated from protobuf enum <code>SET = 2;</code>
     */
    const SET = 2;
    /**
     * Generated from protobuf enum <code>LIST = 3;</code>
     */
    const PBLIST = 3;
    /**
     * Generated from protobuf enum <code>SORTED_SET = 4;</code>
     */
    const SORTED_SET = 4;

    private static $valueToName = [
        self::SCALAR => 'SCALAR',
        self::DICTIONARY => 'DICTIONARY',
        self::SET => 'SET',
        self::PBLIST => 'PBLIST',
        self::SORTED_SET => 'SORTED_SET',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ItemType::class, \Cache_client\_ItemGetTypeResponse_ItemType::class);

